#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void adc_int(void);
void timer_init(void);
volatile unsigned int speed; // variable used to control delay
volatile int stop = 0; // if set to 1, the motor is turned off

int main(void)
{
	DDRD = 0xFF;          //Enable output on all of the B pins
	PORTD = 0x00;         // initialize to 0v
	adc_int();	      // initialize ADC
	TCCR1B = 0x0D;        // set CTC mode and 256 prescaler
	while(1){

// Convert the ADC value to a speed to control the motor. motor stops if ADC value is greater then 1015
// with the clock set to 1MHz and the clock prescaler set to 256, I found the the delay necessary to be quite small.
// if clock frequency is higher, or sprescaler value is different, the speed values will be different.
		if	(ADC <= 4)    {stop = 0; speed = 1;}
		else if	(ADC <= 85)   {stop = 0; speed = 2;}
		else if (ADC <= 170)  {stop = 0; speed = 3;}
		else if (ADC <= 255)  {stop = 0; speed = 4;}
		else if (ADC <= 340)  {stop = 0; speed = 5;}
		else if (ADC <= 425)  {stop = 0; speed = 6;}
		else if (ADC <= 510)  {stop = 0; speed = 7;}
		else if (ADC <= 595)  {stop = 0; speed = 8;}
		else if (ADC <= 680)  {stop = 0; speed = 9;}
		else if (ADC <= 765)  {stop = 0; speed = 10;}
		else if (ADC <= 850)  {stop = 0; speed = 11;}
		else if (ADC <= 935)  {stop = 0; speed = 12;}
		else if (ADC <= 1015) {stop = 0; speed = 13;}
		else		      {stop = 1;}

		OCR1A = speed;		// set OCR1A to the determined speed 
		TCNT1 = 0x00;		// reset the clock
		if(stop == 0){
			// if the motor is not to be halted, run a step with the designated lenght delay
			while((TIFR1 & 0x2) != 0x2);
				PORTD = 0x06;
				TIFR1 |= (1<<OCF1A);
			while((TIFR1 & 0x2) != 0x2);
				PORTD = 0x0C ;
				TIFR1 |= (1<<OCF1A);
			while((TIFR1 & 0x2) != 0x2);
				PORTD = 0X09;
				TIFR1 |= (1<<OCF1A);
			while((TIFR1 & 0x2) != 0x2);
				PORTD = 0X03;
				TIFR1 |= (1<<OCF1A);
		}
	}
}

void adc_int(void){
	ADMUX = (0<<REFS1)|//	Reference	Selection	Bits
	(1<<REFS0)|//	AVcc-external	cap	at	AREF
	(0<<ADLAR)|//	ADC	Left	Adjust	Result
	(0<<MUX3)|
	(0<<MUX2)|//	ANalogChannel	Selection	Bits
	(0<<MUX1)|//	ADC0	(PC0)
	(0<<MUX0);

	ADCSRA = (1<<ADEN)|//	ADC	ENable
	(1<<ADSC)|//	ADC	Start	Conversion
	(1<<ADATE)|//	ADC	Auto	Trigger	Enable
	(0<<ADIF)|//	ADC	Interrupt	Flag
	(1<<ADIE)|//	ADC	Interrupt	Enable
	(1<<ADPS2)|//	ADC	PrescalerSelect	Bits
	(1<<ADPS1)|
	(1<<ADPS0);
}
